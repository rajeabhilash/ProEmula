/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package startup;

/**
 *
 * @author Raje Abhilash Mohite
 */

public class startGUI extends javax.swing.JFrame {

    /**
     * Creates new form startGUI
     */
    
    java.awt.BorderLayout stackLayout;
    processor.ProcessHandler processHandler;
    processor.ProcessorIDLE idle;
    //promula_util.MicroClock idleClockSync;
    java.awt.Graphics draw;
    int xPos,yPos;
    
    public startGUI() {
        voce.SpeechInterface.init("../../../lib", true, false, "", "");
        initComponents();
        draw = PEM.getGraphics();
        PEM.paintComponents(draw);
        draw.fillOval(xPos-50, yPos-50, 100, 100);
        promula_util.Clock clk = new promula_util.Clock(PEM_Date_AND_TIME);        
        idle = new processor.ProcessorIDLE(TIMER);
        //idleClockSync = new promula_util.MicroClock(TIMER);
        processHandler = new processor.ProcessHandler(PEM_PROCESS_QUEUE_PANEL,this.PEM_ExecutedProcess_Panel);
        processHandler.getElementsDetails(this.PEM_PR_NEXT_PROCESS_NAME, this.PEM_PR_PROCESS_NAME, this.PEM_PR_PROFIT, this.PEM_PR_TIME, this.PEM_PR_ARRIVED_TIME, this.PEM_PR_WILL_EXECUTE_ON);
        processHandler.getRuntimeElement(this.PEM_PR_REMAINING_TIME, this.PEM_PR_EXECUTION_PERCENT, this.PEM_PR_EXECUTION_BAR);
        processHandler.getStatistics(this.PEF_P_ProcessesExecuted, this.PEF_P_TimeTaken, this.PEF_P_ProfitObtained);
        processHandler.start();
        clk.start();
        Thread HeadPanel = new Thread((Runnable)PEM_HEAD_PANEL);
        HeadPanel.start();
        Thread ControlPanel = new Thread((Runnable)PEM_CONTROLLER_PANEL);
        ControlPanel.start();
        Thread Simula = new Thread((Runnable)PEM_SIMULATOR_PANEL);
        Simula.start();
        Thread ProMula = new Thread((Runnable)PEM_PROCESSOR_PANEL);
        ProMula.start();
        Thread Queue = new Thread((Runnable)PEM_PROCESS_QUEUE_PANEL);
        Queue.start();
        Thread Complete = new Thread((Runnable)PEM_ExecutedProcess_Panel);
        Complete.start();
        Thread InfoBar = new Thread((Runnable)PEM_ABOUT_US_PANEL);
        InfoBar.start();
        //idleClockSync.start();
        idle.start();
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PEM = new MaterialBackground();
        PEM_HEAD_PANEL = new promula_util.Humpu("HEAD");
        PEM_HeadName = new javax.swing.JLabel();
        PEM_EXIT = new javax.swing.JButton();
        PEM_MINI = new javax.swing.JButton();
        PEM_Date_AND_TIME = new javax.swing.JLabel();
        PEM_ADSL = new javax.swing.JLabel();
        PEM_HeadNameAbbrivation = new javax.swing.JLabel();
        PEM_SIMULATOR_PANEL = new promula_util.Humpu("SIMULA");
        PEM_PROCESSOR_PANEL = new promula_util.Humpu("PROCESSOR");
        TIMER = new javax.swing.JLabel();
        PEF_P_LProcessesExecuted = new javax.swing.JLabel();
        PEF_P_LTimeTaken = new javax.swing.JLabel();
        PEF_P_LProfitObtained = new javax.swing.JLabel();
        PEF_P_ProcessesExecuted = new javax.swing.JLabel();
        PEF_P_TimeTaken = new javax.swing.JLabel();
        PEF_P_ProfitObtained = new javax.swing.JLabel();
        SEP_001 = new javax.swing.JSeparator();
        SEP_002 = new javax.swing.JSeparator();
        SEP_003 = new javax.swing.JSeparator();
        SEP_004 = new javax.swing.JSeparator();
        PEM_PR_REMAINING_TIME = new javax.swing.JLabel();
        PEM_PR_REMAINING_TIME_IN = new javax.swing.JLabel();
        PEM_PR_PROCESS_NAME = new javax.swing.JLabel();
        PEM_PR_LB_PROFIT = new javax.swing.JLabel();
        PEM_PR_LB_TIME = new javax.swing.JLabel();
        PEM_PR_LB_ARRIVED_TIME = new javax.swing.JLabel();
        PEM_PR_LB_WILL_EXECUTE_ON = new javax.swing.JLabel();
        PEM_PR_PROFIT = new javax.swing.JLabel();
        PEM_PR_TIME = new javax.swing.JLabel();
        PEM_PR_ARRIVED_TIME = new javax.swing.JLabel();
        PEM_PR_WILL_EXECUTE_ON = new javax.swing.JLabel();
        PEM_PR_EXECUTION_BAR = new javax.swing.JProgressBar();
        PEM_PR_EXECUTION_PERCENT = new javax.swing.JLabel();
        PEM_SEP_001 = new javax.swing.JSeparator();
        PEM_SEP_002 = new javax.swing.JSeparator();
        PEM_PR_NEXT_PROCESS_NAME = new javax.swing.JLabel();
        PEM_PROCESS_QUEUE_SCROLL = new javax.swing.JScrollPane();
        PEM_PROCESS_QUEUE_PANEL = new promula_util.Humpu("QUEUE");
        PEM_EXECUTED_PROCESS_SCROLL = new javax.swing.JScrollPane();
        PEM_ExecutedProcess_Panel = new promula_util.Humpu("COMPLETED");
        PEM_CONTROLLER_PANEL = new promula_util.Humpu("CONTROLLER");
        PEM_LB_PROCESS_NAME = new javax.swing.JLabel();
        PEM_LB_PROCESS_PROFIT = new javax.swing.JLabel();
        PEM_LB_PROCESS_TIME = new javax.swing.JLabel();
        PEM_PNAME = new javax.swing.JTextField();
        PEM_PTIME = new javax.swing.JTextField();
        PEM_PPROFIT = new javax.swing.JTextField();
        PEM_LB_END_PROCESS = new javax.swing.JLabel();
        PEM_LB_END_POINTS = new javax.swing.JLabel();
        PEM_LB_END_SECONDS = new javax.swing.JLabel();
        PEM_PROCESS_MESSAGE = new javax.swing.JLabel();
        PML_ADD_START = new javax.swing.JButton();
        PEM_IMPORT = new javax.swing.JButton();
        PEM_ABOUT_US_PANEL = new promula_util.Humpu("PROCESSOR");
        PEM_RAJEABHILASH = new javax.swing.JLabel();
        PEM_DEV_ROLL_NO = new javax.swing.JLabel();
        PEM_DEV_PRACTICLE = new javax.swing.JLabel();
        PEM_DESCRIPTION = new javax.swing.JLabel();
        PEM_SEP_004 = new javax.swing.JSeparator();
        PEM_SEP_005 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProEmula - Processor Emulator Formula.");
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        PEM.setBackground(new java.awt.Color(0,0,0,255));
        PEM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255)));
        PEM.setForeground(new java.awt.Color(255, 51, 0));
        PEM.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                PEMMouseMoved(evt);
            }
        });

        PEM_HEAD_PANEL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_HEAD_PANEL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255)));
        PEM_HEAD_PANEL.setForeground(new java.awt.Color(0,51,51,125));

        PEM_HeadName.setFont(new java.awt.Font("Chiptype", 0, 80)); // NOI18N
        PEM_HeadName.setForeground(new java.awt.Color(102, 255, 255));
        PEM_HeadName.setText("PROEMULA");

        PEM_EXIT.setBackground(new java.awt.Color(0,0,0,0));
        PEM_EXIT.setFont(new java.awt.Font("Caviar Dreams", 1, 24)); // NOI18N
        PEM_EXIT.setForeground(new java.awt.Color(0, 204, 204));
        PEM_EXIT.setMnemonic('x');
        PEM_EXIT.setText("X");
        PEM_EXIT.setToolTipText("");
        PEM_EXIT.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 0, new java.awt.Color(0, 255, 255)));
        PEM_EXIT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PEM_EXIT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PEM_EXITMouseEntered1(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PEM_EXITMouseExited(evt);
            }
        });
        PEM_EXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PEM_EXITActionPerformed(evt);
            }
        });

        PEM_MINI.setBackground(new java.awt.Color(0,0,0,0));
        PEM_MINI.setFont(new java.awt.Font("Caviar Dreams", 1, 24)); // NOI18N
        PEM_MINI.setForeground(new java.awt.Color(0, 255, 255));
        PEM_MINI.setMnemonic('_');
        PEM_MINI.setText("_");
        PEM_MINI.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 0, new java.awt.Color(0, 255, 255)));
        PEM_MINI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PEM_MINI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PEM_MINIMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PEM_MINIMouseExited(evt);
            }
        });
        PEM_MINI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PEM_MINIActionPerformed(evt);
            }
        });

        PEM_Date_AND_TIME.setFont(new java.awt.Font("Caviar Dreams", 0, 24)); // NOI18N
        PEM_Date_AND_TIME.setForeground(new java.awt.Color(0, 255, 255));
        PEM_Date_AND_TIME.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PEM_Date_AND_TIME.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 0, new java.awt.Color(0, 204, 204)));

        PEM_ADSL.setFont(new java.awt.Font("Caviar Dreams", 1, 36)); // NOI18N
        PEM_ADSL.setForeground(new java.awt.Color(0, 204, 204));
        PEM_ADSL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PEM_ADSL.setText("  ADVANCED DATA STRUCTURE  ");
        PEM_ADSL.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(0, 204, 204)));

        PEM_HeadNameAbbrivation.setFont(new java.awt.Font("EA Sports Covers SC", 0, 50)); // NOI18N
        PEM_HeadNameAbbrivation.setForeground(new java.awt.Color(0, 255, 255));
        PEM_HeadNameAbbrivation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PEM_HeadNameAbbrivation.setText("PROCESSOR EMULATOR FORMULA  ");

        javax.swing.GroupLayout PEM_HEAD_PANELLayout = new javax.swing.GroupLayout(PEM_HEAD_PANEL);
        PEM_HEAD_PANEL.setLayout(PEM_HEAD_PANELLayout);
        PEM_HEAD_PANELLayout.setHorizontalGroup(
            PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_HEAD_PANELLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(PEM_HeadName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PEM_HeadNameAbbrivation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PEM_HEAD_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_Date_AND_TIME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(PEM_MINI, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(PEM_EXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PEM_ADSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        PEM_HEAD_PANELLayout.setVerticalGroup(
            PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_HEAD_PANELLayout.createSequentialGroup()
                .addGroup(PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_Date_AND_TIME, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PEM_EXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PEM_MINI, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(PEM_ADSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PEM_HEAD_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEM_HEAD_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PEM_HeadName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_HeadNameAbbrivation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PEM_SIMULATOR_PANEL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_SIMULATOR_PANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 1, true), "  SIMULATION  ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(0, 255, 51))); // NOI18N

        PEM_PROCESSOR_PANEL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PROCESSOR_PANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), " PROCESSOR  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N

        TIMER.setBackground(new java.awt.Color(0,0,0,0));
        TIMER.setFont(new java.awt.Font("BankGothic Md BT", 0, 60)); // NOI18N
        TIMER.setForeground(new java.awt.Color(255, 255, 255));
        TIMER.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        TIMER.setText("08:00:50");
        TIMER.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(255, 255, 255)), "  CPU LIFE TIMER  ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        PEF_P_LProcessesExecuted.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PEF_P_LProcessesExecuted.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_LProcessesExecuted.setText("Processes Executed :");

        PEF_P_LTimeTaken.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PEF_P_LTimeTaken.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_LTimeTaken.setText("Time Taken :");

        PEF_P_LProfitObtained.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PEF_P_LProfitObtained.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_LProfitObtained.setText("Profit Obtained :");

        PEF_P_ProcessesExecuted.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PEF_P_ProcessesExecuted.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_ProcessesExecuted.setText("00 Process ");

        PEF_P_TimeTaken.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PEF_P_TimeTaken.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_TimeTaken.setText("000 Seconds");

        PEF_P_ProfitObtained.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PEF_P_ProfitObtained.setForeground(new java.awt.Color(255, 255, 255));
        PEF_P_ProfitObtained.setText("0000 Points");

        SEP_001.setOrientation(javax.swing.SwingConstants.VERTICAL);

        SEP_002.setOrientation(javax.swing.SwingConstants.VERTICAL);

        SEP_003.setBackground(new java.awt.Color(0,0,0,0));
        SEP_003.setForeground(new java.awt.Color(255, 255, 255));

        SEP_004.setBackground(new java.awt.Color(0,0,0,0));
        SEP_004.setForeground(new java.awt.Color(255, 255, 255));

        PEM_PR_REMAINING_TIME.setFont(new java.awt.Font("EA Font v1.5 by Ghettoshark", 0, 150)); // NOI18N
        PEM_PR_REMAINING_TIME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_REMAINING_TIME.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PEM_PR_REMAINING_TIME.setText("00");
        PEM_PR_REMAINING_TIME.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PEM_PR_REMAINING_TIME.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        PEM_PR_REMAINING_TIME_IN.setFont(new java.awt.Font("EA Font v1.5 by Ghettoshark", 0, 30)); // NOI18N
        PEM_PR_REMAINING_TIME_IN.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_REMAINING_TIME_IN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PEM_PR_REMAINING_TIME_IN.setText("SECONDS");
        PEM_PR_REMAINING_TIME_IN.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PEM_PR_REMAINING_TIME_IN.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        PEM_PR_PROCESS_NAME.setFont(new java.awt.Font("Caviar Dreams", 1, 50)); // NOI18N
        PEM_PR_PROCESS_NAME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_PROCESS_NAME.setText(" Add Process to Execute");

        PEM_PR_LB_PROFIT.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PR_LB_PROFIT.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_LB_PROFIT.setText("PROFIT :");

        PEM_PR_LB_TIME.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PR_LB_TIME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_LB_TIME.setText("TIME :");

        PEM_PR_LB_ARRIVED_TIME.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PR_LB_ARRIVED_TIME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_LB_ARRIVED_TIME.setText("ARRIVED TIME :");

        PEM_PR_LB_WILL_EXECUTE_ON.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PR_LB_WILL_EXECUTE_ON.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_LB_WILL_EXECUTE_ON.setText("WILL EXECUTE ON :");

        PEM_PR_PROFIT.setFont(new java.awt.Font("Caviar Dreams", 0, 20)); // NOI18N
        PEM_PR_PROFIT.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_PROFIT.setText("000 Points");

        PEM_PR_TIME.setFont(new java.awt.Font("Caviar Dreams", 0, 20)); // NOI18N
        PEM_PR_TIME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_TIME.setText("000 Seconds");

        PEM_PR_ARRIVED_TIME.setFont(new java.awt.Font("Caviar Dreams", 0, 20)); // NOI18N
        PEM_PR_ARRIVED_TIME.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_ARRIVED_TIME.setText("00:00:00 PM");

        PEM_PR_WILL_EXECUTE_ON.setFont(new java.awt.Font("Caviar Dreams", 0, 20)); // NOI18N
        PEM_PR_WILL_EXECUTE_ON.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_WILL_EXECUTE_ON.setText("00:00:00 PM");

        PEM_PR_EXECUTION_BAR.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PR_EXECUTION_BAR.setFont(new java.awt.Font("Candara", 0, 24)); // NOI18N
        PEM_PR_EXECUTION_BAR.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_EXECUTION_BAR.setBorder(null);
        PEM_PR_EXECUTION_BAR.setDoubleBuffered(true);
        PEM_PR_EXECUTION_BAR.setString("");
        PEM_PR_EXECUTION_BAR.setStringPainted(true);

        PEM_PR_EXECUTION_PERCENT.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        PEM_PR_EXECUTION_PERCENT.setForeground(new java.awt.Color(255, 255, 255));
        PEM_PR_EXECUTION_PERCENT.setText("00%");

        PEM_SEP_001.setBackground(new java.awt.Color(0,0,0,0));
        PEM_SEP_001.setForeground(new java.awt.Color(255, 255, 255));

        PEM_SEP_002.setBackground(new java.awt.Color(0,0,0,0));
        PEM_SEP_002.setForeground(new java.awt.Color(255, 255, 255));

        PEM_PR_NEXT_PROCESS_NAME.setFont(new java.awt.Font("Caviar Dreams", 1, 35)); // NOI18N
        PEM_PR_NEXT_PROCESS_NAME.setForeground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout PEM_PROCESSOR_PANELLayout = new javax.swing.GroupLayout(PEM_PROCESSOR_PANEL);
        PEM_PROCESSOR_PANEL.setLayout(PEM_PROCESSOR_PANELLayout);
        PEM_PROCESSOR_PANELLayout.setHorizontalGroup(
            PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SEP_004)
            .addComponent(SEP_003, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                                        .addComponent(PEM_PR_LB_PROFIT)
                                        .addGap(80, 80, 80)
                                        .addComponent(PEM_PR_PROFIT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                                        .addComponent(PEM_PR_LB_ARRIVED_TIME)
                                        .addGap(18, 18, 18)
                                        .addComponent(PEM_PR_ARRIVED_TIME)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PEM_PR_LB_WILL_EXECUTE_ON)
                                    .addComponent(PEM_PR_LB_TIME))
                                .addGap(18, 18, 18)
                                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PEM_PR_TIME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PEM_PR_WILL_EXECUTE_ON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(PEM_SEP_001)
                            .addComponent(PEM_SEP_002)
                            .addComponent(PEM_PR_PROCESS_NAME)
                            .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                                .addComponent(PEM_PR_EXECUTION_PERCENT, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(PEM_PR_EXECUTION_BAR, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PEM_PR_REMAINING_TIME, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PEM_PR_REMAINING_TIME_IN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addComponent(PEF_P_LProcessesExecuted)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEF_P_ProcessesExecuted)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SEP_001, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEF_P_LTimeTaken)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PEF_P_TimeTaken)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SEP_002, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEF_P_LProfitObtained)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEF_P_ProfitObtained)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_PR_NEXT_PROCESS_NAME)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TIMER))))
        );
        PEM_PROCESSOR_PANELLayout.setVerticalGroup(
            PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_PR_NEXT_PROCESS_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(TIMER, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SEP_003, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_PR_REMAINING_TIME, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(PEM_PR_REMAINING_TIME_IN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PEM_PROCESSOR_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_PR_PROCESS_NAME)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_SEP_002, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PEM_PR_LB_PROFIT)
                            .addComponent(PEM_PR_PROFIT)
                            .addComponent(PEM_PR_LB_TIME)
                            .addComponent(PEM_PR_TIME))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PEM_PR_LB_ARRIVED_TIME)
                            .addComponent(PEM_PR_ARRIVED_TIME)
                            .addComponent(PEM_PR_LB_WILL_EXECUTE_ON)
                            .addComponent(PEM_PR_WILL_EXECUTE_ON))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_SEP_001, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PEM_PR_EXECUTION_PERCENT, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PEM_PR_EXECUTION_BAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SEP_004, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PEM_PROCESSOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PEF_P_LProcessesExecuted)
                        .addComponent(PEF_P_LTimeTaken)
                        .addComponent(PEF_P_LProfitObtained)
                        .addComponent(PEF_P_ProcessesExecuted)
                        .addComponent(PEF_P_TimeTaken)
                        .addComponent(PEF_P_ProfitObtained))
                    .addComponent(SEP_001, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SEP_002, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        PEM_PROCESS_QUEUE_SCROLL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PROCESS_QUEUE_SCROLL.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 255), 1, true), "  Process Queue  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(255, 0, 204))); // NOI18N
        PEM_PROCESS_QUEUE_SCROLL.setForeground(new java.awt.Color(255, 0, 255));
        PEM_PROCESS_QUEUE_SCROLL.setDoubleBuffered(true);
        PEM_PROCESS_QUEUE_SCROLL.setHorizontalScrollBar(null);

        PEM_PROCESS_QUEUE_PANEL.setBackground(new java.awt.Color(0,0,0,0));

        javax.swing.GroupLayout PEM_PROCESS_QUEUE_PANELLayout = new javax.swing.GroupLayout(PEM_PROCESS_QUEUE_PANEL);
        PEM_PROCESS_QUEUE_PANEL.setLayout(PEM_PROCESS_QUEUE_PANELLayout);
        PEM_PROCESS_QUEUE_PANELLayout.setHorizontalGroup(
            PEM_PROCESS_QUEUE_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );
        PEM_PROCESS_QUEUE_PANELLayout.setVerticalGroup(
            PEM_PROCESS_QUEUE_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 717, Short.MAX_VALUE)
        );

        PEM_PROCESS_QUEUE_SCROLL.setViewportView(PEM_PROCESS_QUEUE_PANEL);

        PEM_EXECUTED_PROCESS_SCROLL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_EXECUTED_PROCESS_SCROLL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)), "  Executed Process ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(255, 102, 0))); // NOI18N

        PEM_ExecutedProcess_Panel.setBackground(new java.awt.Color(0,0,0,0));

        javax.swing.GroupLayout PEM_ExecutedProcess_PanelLayout = new javax.swing.GroupLayout(PEM_ExecutedProcess_Panel);
        PEM_ExecutedProcess_Panel.setLayout(PEM_ExecutedProcess_PanelLayout);
        PEM_ExecutedProcess_PanelLayout.setHorizontalGroup(
            PEM_ExecutedProcess_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        PEM_ExecutedProcess_PanelLayout.setVerticalGroup(
            PEM_ExecutedProcess_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        PEM_EXECUTED_PROCESS_SCROLL.setViewportView(PEM_ExecutedProcess_Panel);

        javax.swing.GroupLayout PEM_SIMULATOR_PANELLayout = new javax.swing.GroupLayout(PEM_SIMULATOR_PANEL);
        PEM_SIMULATOR_PANEL.setLayout(PEM_SIMULATOR_PANELLayout);
        PEM_SIMULATOR_PANELLayout.setHorizontalGroup(
            PEM_SIMULATOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_SIMULATOR_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PEM_PROCESS_QUEUE_SCROLL, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PEM_SIMULATOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_PROCESSOR_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_EXECUTED_PROCESS_SCROLL))
                .addContainerGap())
        );
        PEM_SIMULATOR_PANELLayout.setVerticalGroup(
            PEM_SIMULATOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_SIMULATOR_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEM_SIMULATOR_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_PROCESS_QUEUE_SCROLL)
                    .addGroup(PEM_SIMULATOR_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_PROCESSOR_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_EXECUTED_PROCESS_SCROLL)))
                .addContainerGap())
        );

        PEM_CONTROLLER_PANEL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_CONTROLLER_PANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true), "  CONTROLLER  ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(255, 255, 0))); // NOI18N

        PEM_LB_PROCESS_NAME.setFont(new java.awt.Font("Caviar Dreams", 0, 18)); // NOI18N
        PEM_LB_PROCESS_NAME.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_PROCESS_NAME.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PEM_LB_PROCESS_NAME.setText("  Process Name :");
        PEM_LB_PROCESS_NAME.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_LB_PROCESS_PROFIT.setFont(new java.awt.Font("Caviar Dreams", 0, 18)); // NOI18N
        PEM_LB_PROCESS_PROFIT.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_PROCESS_PROFIT.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PEM_LB_PROCESS_PROFIT.setText("  Process Profit :");
        PEM_LB_PROCESS_PROFIT.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_LB_PROCESS_TIME.setFont(new java.awt.Font("Caviar Dreams", 0, 18)); // NOI18N
        PEM_LB_PROCESS_TIME.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_PROCESS_TIME.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PEM_LB_PROCESS_TIME.setText("  Execution Time :");
        PEM_LB_PROCESS_TIME.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_PNAME.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PNAME.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PNAME.setForeground(new java.awt.Color(255, 255, 0));
        PEM_PNAME.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PEM_PNAME.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));
        PEM_PNAME.setCaretColor(new java.awt.Color(255, 255, 0));
        PEM_PNAME.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        PEM_PNAME.setSelectionColor(new java.awt.Color(255, 255, 0));
        PEM_PNAME.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PEM_PNAMEFocusGained(evt);
            }
        });

        PEM_PTIME.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PTIME.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PTIME.setForeground(new java.awt.Color(255, 255, 0));
        PEM_PTIME.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PEM_PTIME.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));
        PEM_PTIME.setCaretColor(new java.awt.Color(255, 255, 0));
        PEM_PTIME.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        PEM_PTIME.setSelectionColor(new java.awt.Color(255, 255, 0));
        PEM_PTIME.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PEM_PTIMEFocusGained(evt);
            }
        });

        PEM_PPROFIT.setBackground(new java.awt.Color(0,0,0,0));
        PEM_PPROFIT.setFont(new java.awt.Font("Caviar Dreams", 1, 20)); // NOI18N
        PEM_PPROFIT.setForeground(new java.awt.Color(255, 255, 0));
        PEM_PPROFIT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PEM_PPROFIT.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));
        PEM_PPROFIT.setCaretColor(new java.awt.Color(255, 255, 0));
        PEM_PPROFIT.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        PEM_PPROFIT.setSelectionColor(new java.awt.Color(255, 255, 0));
        PEM_PPROFIT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PEM_PPROFITFocusGained(evt);
            }
        });

        PEM_LB_END_PROCESS.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        PEM_LB_END_PROCESS.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_END_PROCESS.setText(".process");
        PEM_LB_END_PROCESS.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_LB_END_POINTS.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        PEM_LB_END_POINTS.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_END_POINTS.setText(".points");
        PEM_LB_END_POINTS.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_LB_END_SECONDS.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        PEM_LB_END_SECONDS.setForeground(new java.awt.Color(255, 255, 0));
        PEM_LB_END_SECONDS.setText(".seconds");
        PEM_LB_END_SECONDS.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 0)));

        PEM_PROCESS_MESSAGE.setFont(new java.awt.Font("Square721 BT", 0, 20)); // NOI18N
        PEM_PROCESS_MESSAGE.setForeground(new java.awt.Color(255, 255, 0));
        PEM_PROCESS_MESSAGE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        PML_ADD_START.setBackground(new java.awt.Color(0,0,0,0));
        PML_ADD_START.setFont(new java.awt.Font("Caviar Dreams", 1, 36)); // NOI18N
        PML_ADD_START.setForeground(new java.awt.Color(255, 255, 0));
        PML_ADD_START.setText("ADD PROCESS");
        PML_ADD_START.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(255, 255, 0)));
        PML_ADD_START.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PML_ADD_START.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PML_ADD_STARTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PML_ADD_STARTMouseExited(evt);
            }
        });
        PML_ADD_START.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PML_ADD_STARTActionPerformed(evt);
            }
        });

        PEM_IMPORT.setBackground(new java.awt.Color(0,0,0,0));
        PEM_IMPORT.setFont(new java.awt.Font("Modern Serif", 1, 36)); // NOI18N
        PEM_IMPORT.setForeground(new java.awt.Color(255, 255, 0));
        PEM_IMPORT.setText("+");
        PEM_IMPORT.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 0, new java.awt.Color(255, 255, 0)));
        PEM_IMPORT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PEM_IMPORT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PEM_IMPORTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PEM_IMPORTMouseExited(evt);
            }
        });
        PEM_IMPORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PEM_IMPORTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PEM_CONTROLLER_PANELLayout = new javax.swing.GroupLayout(PEM_CONTROLLER_PANEL);
        PEM_CONTROLLER_PANEL.setLayout(PEM_CONTROLLER_PANELLayout);
        PEM_CONTROLLER_PANELLayout.setHorizontalGroup(
            PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_CONTROLLER_PANELLayout.createSequentialGroup()
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PEM_LB_PROCESS_NAME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_LB_PROCESS_TIME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_LB_PROCESS_PROFIT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_PPROFIT, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PEM_PNAME, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PEM_PTIME))
                .addGap(0, 0, 0)
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PEM_LB_END_SECONDS, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(PEM_LB_END_PROCESS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_LB_END_POINTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(PEM_PROCESS_MESSAGE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PEM_CONTROLLER_PANELLayout.createSequentialGroup()
                .addComponent(PML_ADD_START, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(PEM_IMPORT, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PEM_CONTROLLER_PANELLayout.setVerticalGroup(
            PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_CONTROLLER_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PEM_LB_PROCESS_NAME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_PNAME, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(PEM_LB_END_PROCESS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PEM_PPROFIT, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(PEM_LB_PROCESS_PROFIT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEM_LB_END_POINTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PEM_LB_PROCESS_TIME, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PEM_PTIME, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PEM_LB_END_SECONDS, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PEM_CONTROLLER_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PML_ADD_START, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(PEM_IMPORT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PEM_PROCESS_MESSAGE, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PEM_ABOUT_US_PANEL.setBackground(new java.awt.Color(0,0,0,0));
        PEM_ABOUT_US_PANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "  About Me   ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Birdman", 0, 20), new java.awt.Color(255, 255, 255))); // NOI18N
        PEM_ABOUT_US_PANEL.setForeground(new java.awt.Color(255, 255, 255));

        PEM_RAJEABHILASH.setFont(new java.awt.Font("EA Font v1.5 by Ghettoshark", 1, 36)); // NOI18N
        PEM_RAJEABHILASH.setForeground(new java.awt.Color(255, 255, 255));
        PEM_RAJEABHILASH.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PEM_RAJEABHILASH.setText("ABHILASH S. CHAVHAN");

        PEM_DEV_ROLL_NO.setFont(new java.awt.Font("Caviar Dreams", 1, 25)); // NOI18N
        PEM_DEV_ROLL_NO.setForeground(new java.awt.Color(255, 255, 255));
        PEM_DEV_ROLL_NO.setText("SE-B, 22110");

        PEM_DEV_PRACTICLE.setFont(new java.awt.Font("Caviar Dreams", 1, 24)); // NOI18N
        PEM_DEV_PRACTICLE.setForeground(new java.awt.Color(255, 255, 255));
        PEM_DEV_PRACTICLE.setText("ADSL - ASSIGN. 04");

        PEM_DESCRIPTION.setFont(new java.awt.Font("Caviar Dreams", 0, 24)); // NOI18N
        PEM_DESCRIPTION.setForeground(new java.awt.Color(255, 255, 255));
        PEM_DESCRIPTION.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PEM_DESCRIPTION.setText("<html>\n<body>\n\t<h1>Q : WHAT IS PROEMULA</h1>\n\t<STRONG>Ans : </STRONG>N Number of Tasks (processes) are to be added in Job Queue. \n\tAll tasks are having some time interval to execute on processor.\n\tUsing <STRONG>Greedy Approch</STRONG> Execute one task\n\tat a time and get Maximum Profit in lesser period of time. \n\tHere we have to find total optimised time for execution of all the processes\n\tand get the <STRONG> OPTIMUM SOLUTION </STRONG>.\n<body>\n</html>");
        PEM_DESCRIPTION.setToolTipText("");
        PEM_DESCRIPTION.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PEM_DESCRIPTION.setDoubleBuffered(true);

        PEM_SEP_004.setBackground(new java.awt.Color(0,0,0,0));
        PEM_SEP_004.setForeground(new java.awt.Color(255, 255, 255));
        PEM_SEP_004.setOrientation(javax.swing.SwingConstants.VERTICAL);

        PEM_SEP_005.setBackground(new java.awt.Color(0,0,0,0));
        PEM_SEP_005.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PEM_ABOUT_US_PANELLayout = new javax.swing.GroupLayout(PEM_ABOUT_US_PANEL);
        PEM_ABOUT_US_PANEL.setLayout(PEM_ABOUT_US_PANELLayout);
        PEM_ABOUT_US_PANELLayout.setHorizontalGroup(
            PEM_ABOUT_US_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_ABOUT_US_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEM_ABOUT_US_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_RAJEABHILASH, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addComponent(PEM_DESCRIPTION, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(PEM_ABOUT_US_PANELLayout.createSequentialGroup()
                        .addComponent(PEM_DEV_ROLL_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_SEP_004, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PEM_DEV_PRACTICLE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(PEM_SEP_005, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        PEM_ABOUT_US_PANELLayout.setVerticalGroup(
            PEM_ABOUT_US_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEM_ABOUT_US_PANELLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(PEM_RAJEABHILASH, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PEM_ABOUT_US_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PEM_ABOUT_US_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(PEM_DEV_PRACTICLE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PEM_SEP_004))
                    .addComponent(PEM_DEV_ROLL_NO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PEM_SEP_005, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PEM_DESCRIPTION, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PEMLayout = new javax.swing.GroupLayout(PEM);
        PEM.setLayout(PEMLayout);
        PEMLayout.setHorizontalGroup(
            PEMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PEMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_HEAD_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PEMLayout.createSequentialGroup()
                        .addGroup(PEMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PEM_CONTROLLER_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PEM_ABOUT_US_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_SIMULATOR_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PEMLayout.setVerticalGroup(
            PEMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PEMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PEM_HEAD_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PEMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PEM_SIMULATOR_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PEMLayout.createSequentialGroup()
                        .addComponent(PEM_CONTROLLER_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PEM_ABOUT_US_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PEM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PEM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PEM_EXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PEM_EXITActionPerformed
       try
        {
         voce.SpeechInterface.synthesize("Exiting from ProEmuela");
         Thread.sleep(2000);
        }
        catch(Exception e){}
        voce.SpeechInterface.destroy();
        System.exit(0);
    }//GEN-LAST:event_PEM_EXITActionPerformed

    private void PML_ADD_STARTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PML_ADD_STARTMouseEntered
        PML_ADD_START.setBackground(new java.awt.Color(255, 255, 0));
        PML_ADD_START.setForeground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_PML_ADD_STARTMouseEntered

    private void PML_ADD_STARTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PML_ADD_STARTMouseExited
        PML_ADD_START.setBackground(new java.awt.Color(0, 0, 0, 0));
        PML_ADD_START.setForeground(new java.awt.Color(255, 255, 0));
    }//GEN-LAST:event_PML_ADD_STARTMouseExited

    private void PML_ADD_STARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PML_ADD_STARTActionPerformed
        if(PEM_PNAME.getText().length()>0&&PEM_PPROFIT.getText().length()>0&&PEM_PTIME.getText().length()>0)
        {
            try
            {
                if((Integer.parseInt(PEM_PPROFIT.getText()))>0&&(Integer.parseInt(PEM_PTIME.getText())>0))
                {
                   
                    processHandler.addProcess(PEM_PNAME.getText(), Integer.parseInt(PEM_PPROFIT.getText()), Integer.parseInt(PEM_PTIME.getText()));
                    voce.SpeechInterface.synthesize(PEM_PNAME.getText()+" is Added");
                    PEM_PNAME.setText("");
                    PEM_PPROFIT.setText("");
                    PEM_PTIME.setText("");
                }
                else
                {
                    PEM_PROCESS_MESSAGE.setText("<html><STRONG>Time</STRONG> and <STRONG>Profit</STRONG> should be <STRONG>Positive</STRONG></html>");
                }
            }
            catch(NumberFormatException e)
            {
                PEM_PROCESS_MESSAGE.setText("<html><STRONG>Time</STRONG> and <STRONG>Profit</STRONG> should be <STRONG>Numbers</STRONG></html>");
            }
        }
        else
        {
            PEM_PROCESS_MESSAGE.setText("Please Enter All Process Details");
        }
    }//GEN-LAST:event_PML_ADD_STARTActionPerformed

    private void PEM_MINIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PEM_MINIActionPerformed
        this.setState(startGUI.ICONIFIED);
    }//GEN-LAST:event_PEM_MINIActionPerformed

    private void PEM_EXITMouseEntered1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_EXITMouseEntered1
        PEM_EXIT.setBackground(new java.awt.Color(255,0,0,255));  
    }//GEN-LAST:event_PEM_EXITMouseEntered1

    private void PEM_EXITMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_EXITMouseExited
        PEM_EXIT.setBackground(new java.awt.Color(0,0,0,0));
    }//GEN-LAST:event_PEM_EXITMouseExited

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
	try
        {
         voce.SpeechInterface.synthesize("Exiting from ProEmuela");
         Thread.sleep(2000);
        }
        catch(Exception e)
        {
            
        }
        voce.SpeechInterface.destroy();
    }//GEN-LAST:event_formWindowClosing

    private void PEM_IMPORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PEM_IMPORTActionPerformed
        javax.swing.JFileChooser getFile = new javax.swing.JFileChooser();
        int retrive = getFile.showOpenDialog(this);
        if(retrive==javax.swing.JFileChooser.APPROVE_OPTION);
        {
            try
            {
                java.io.File file = getFile.getSelectedFile();
                PEM_PNAME.setText(file.getName());
                PEM_PPROFIT.setText(""+file.length()*255);
                PEM_PTIME.setText(""+file.length()/100);
            }
            catch(Exception e)
            {
                PEM_PROCESS_MESSAGE.setText(e.toString());
            }
        }
    }//GEN-LAST:event_PEM_IMPORTActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        voce.SpeechInterface.synthesize("Welcome to ProEmuela");
    }//GEN-LAST:event_formComponentShown

    private void PEM_MINIMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_MINIMouseEntered
        PEM_MINI.setBackground(new java.awt.Color(0,255,255));
        PEM_MINI.setForeground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_PEM_MINIMouseEntered

    private void PEM_MINIMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_MINIMouseExited
        PEM_MINI.setForeground(new java.awt.Color(0,255,255));
        PEM_MINI.setBackground(new java.awt.Color(0,0,0,0));
    }//GEN-LAST:event_PEM_MINIMouseExited

    private void PEM_PNAMEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PEM_PNAMEFocusGained
        this.PEM_PROCESS_MESSAGE.setText("");
        PEM_PNAME.select(0, PEM_PNAME.getText().length());
    }//GEN-LAST:event_PEM_PNAMEFocusGained

    private void PEM_PPROFITFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PEM_PPROFITFocusGained
       this.PEM_PROCESS_MESSAGE.setText("");
       PEM_PPROFIT.select(0, PEM_PPROFIT.getText().length());
    }//GEN-LAST:event_PEM_PPROFITFocusGained

    private void PEM_PTIMEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PEM_PTIMEFocusGained
        this.PEM_PROCESS_MESSAGE.setText("");
        PEM_PTIME.select(0, PEM_PTIME.getText().length());
    }//GEN-LAST:event_PEM_PTIMEFocusGained

    private void PEM_IMPORTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_IMPORTMouseEntered
        PEM_IMPORT.setBackground(new java.awt.Color(255, 255, 0));
        PEM_IMPORT.setForeground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_PEM_IMPORTMouseEntered

    private void PEM_IMPORTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEM_IMPORTMouseExited
        PEM_IMPORT.setForeground(new java.awt.Color(255, 255, 0));
        PEM_IMPORT.setBackground(new java.awt.Color(0, 0, 0, 0));
    }//GEN-LAST:event_PEM_IMPORTMouseExited

    private void PEMMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PEMMouseMoved
        xPos = evt.getX();
        yPos = evt.getY();
        repaint();
    }//GEN-LAST:event_PEMMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(startGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(startGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(startGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(startGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new startGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PEF_P_LProcessesExecuted;
    private javax.swing.JLabel PEF_P_LProfitObtained;
    private javax.swing.JLabel PEF_P_LTimeTaken;
    private javax.swing.JLabel PEF_P_ProcessesExecuted;
    private javax.swing.JLabel PEF_P_ProfitObtained;
    private javax.swing.JLabel PEF_P_TimeTaken;
    private javax.swing.JPanel PEM;
    private javax.swing.JPanel PEM_ABOUT_US_PANEL;
    private javax.swing.JLabel PEM_ADSL;
    private javax.swing.JPanel PEM_CONTROLLER_PANEL;
    private javax.swing.JLabel PEM_DESCRIPTION;
    private javax.swing.JLabel PEM_DEV_PRACTICLE;
    private javax.swing.JLabel PEM_DEV_ROLL_NO;
    private javax.swing.JLabel PEM_Date_AND_TIME;
    private javax.swing.JScrollPane PEM_EXECUTED_PROCESS_SCROLL;
    private javax.swing.JButton PEM_EXIT;
    private javax.swing.JPanel PEM_ExecutedProcess_Panel;
    private javax.swing.JPanel PEM_HEAD_PANEL;
    private javax.swing.JLabel PEM_HeadName;
    private javax.swing.JLabel PEM_HeadNameAbbrivation;
    private javax.swing.JButton PEM_IMPORT;
    private javax.swing.JLabel PEM_LB_END_POINTS;
    private javax.swing.JLabel PEM_LB_END_PROCESS;
    private javax.swing.JLabel PEM_LB_END_SECONDS;
    private javax.swing.JLabel PEM_LB_PROCESS_NAME;
    private javax.swing.JLabel PEM_LB_PROCESS_PROFIT;
    private javax.swing.JLabel PEM_LB_PROCESS_TIME;
    private javax.swing.JButton PEM_MINI;
    private javax.swing.JTextField PEM_PNAME;
    private javax.swing.JTextField PEM_PPROFIT;
    private javax.swing.JPanel PEM_PROCESSOR_PANEL;
    private javax.swing.JLabel PEM_PROCESS_MESSAGE;
    private javax.swing.JPanel PEM_PROCESS_QUEUE_PANEL;
    private javax.swing.JScrollPane PEM_PROCESS_QUEUE_SCROLL;
    private javax.swing.JLabel PEM_PR_ARRIVED_TIME;
    private javax.swing.JProgressBar PEM_PR_EXECUTION_BAR;
    private javax.swing.JLabel PEM_PR_EXECUTION_PERCENT;
    private javax.swing.JLabel PEM_PR_LB_ARRIVED_TIME;
    private javax.swing.JLabel PEM_PR_LB_PROFIT;
    private javax.swing.JLabel PEM_PR_LB_TIME;
    private javax.swing.JLabel PEM_PR_LB_WILL_EXECUTE_ON;
    private javax.swing.JLabel PEM_PR_NEXT_PROCESS_NAME;
    private javax.swing.JLabel PEM_PR_PROCESS_NAME;
    private javax.swing.JLabel PEM_PR_PROFIT;
    private javax.swing.JLabel PEM_PR_REMAINING_TIME;
    private javax.swing.JLabel PEM_PR_REMAINING_TIME_IN;
    private javax.swing.JLabel PEM_PR_TIME;
    private javax.swing.JLabel PEM_PR_WILL_EXECUTE_ON;
    private javax.swing.JTextField PEM_PTIME;
    private javax.swing.JLabel PEM_RAJEABHILASH;
    private javax.swing.JSeparator PEM_SEP_001;
    private javax.swing.JSeparator PEM_SEP_002;
    private javax.swing.JSeparator PEM_SEP_004;
    private javax.swing.JSeparator PEM_SEP_005;
    private javax.swing.JPanel PEM_SIMULATOR_PANEL;
    private javax.swing.JButton PML_ADD_START;
    private javax.swing.JSeparator SEP_001;
    private javax.swing.JSeparator SEP_002;
    private javax.swing.JSeparator SEP_003;
    private javax.swing.JSeparator SEP_004;
    private javax.swing.JLabel TIMER;
    // End of variables declaration//GEN-END:variables
}
